#!/usr/bin/env python
"""
Analyse de la structure HTML du calculateur MFQ pour cr√©er un scraper unifi√©
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time

def analyze_mfq_structure():
    """Analyse la structure de la page MFQ"""
    
    # Configuration Chrome
    chrome_options = Options()
    chrome_options.add_argument('--window-size=1280,720')
    driver = webdriver.Chrome(options=chrome_options)
    
    try:
        print("üîç ANALYSE DE LA STRUCTURE DU CALCULATEUR MFQ")
        print("=" * 60)
        
        # Naviguer vers le calculateur
        url = "https://www.budget.finances.gouv.qc.ca/budget/outils/revenu-disponible/"
        driver.get(url)
        time.sleep(3)
        
        # Accepter les cookies si n√©cessaire
        try:
            cookie_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Accepter')]")
            cookie_button.click()
            print("‚úÖ Cookies accept√©s")
        except:
            print("‚ÑπÔ∏è  Pas de banni√®re de cookies")
        
        print("\nüìã STRUCTURE DES CHAMPS DU FORMULAIRE:")
        print("-" * 40)
        
        # Analyser les champs du formulaire
        fields = [
            ("Situation", "Situation familiale (select)"),
            ("Revenu1", "Revenu brut de travail personne 1"),
            ("AgeAdulte1", "√Çge personne 1"),
            ("Revenu2", "Revenu brut de travail personne 2"),
            ("AgeAdulte2", "√Çge personne 2"),
            ("NbEnfants", "Nombre d'enfants (select)"),
            ("RevenuRetraite1", "Revenu de retraite personne 1"),
            ("RevenuRetraite2", "Revenu de retraite personne 2")
        ]
        
        for field_id, description in fields:
            try:
                element = driver.find_element(By.ID, field_id)
                tag = element.tag_name
                field_type = element.get_attribute('type') if tag == 'input' else tag
                visible = element.is_displayed()
                print(f"‚úÖ #{field_id}: {description}")
                print(f"   - Type: {field_type}, Visible: {visible}")
            except:
                print(f"‚ùå #{field_id}: Non trouv√©")
        
        print("\nüìä STRUCTURE DES R√âSULTATS (2024):")
        print("-" * 40)
        
        # IDs des r√©sultats pour 2024 (_old)
        result_ids = [
            ("RD_old", "Revenu disponible"),
            ("QC_total_old", "R√©gime fiscal du Qu√©bec (total net)"),
            ("QC_impot_old", "Imp√¥t sur le revenu QC"),
            ("QC_sol_old", "Cr√©dit pour la solidarit√©"),
            ("QC_pt_old", "Prime au travail"),
            ("QC_sae_old", "Allocation famille"),
            ("SFS_old", "Fournitures scolaires"),
            ("QC_garde_old", "Cr√©dit garde d'enfants"),
            ("QC_al_old", "Allocation-logement"),
            ("QC_aines_old", "Soutien aux a√Æn√©s"),
            ("QC_adr_old", "Aide sociale"),
            ("QC_medic_old", "Frais m√©dicaux QC"),
            ("CA_total_old", "R√©gime fiscal f√©d√©ral (total net)"),
            ("CA_impot_old", "Imp√¥t sur le revenu f√©d√©ral"),
            ("CA_ace_old", "Allocation canadienne pour enfants"),
            ("CA_tps_old", "Cr√©dit pour la TPS"),
            ("CA_pfrt_old", "Allocation canadienne pour les travailleurs"),
            ("CA_psv_old", "Pension s√©curit√© vieillesse"),
            ("CA_medic_old", "Frais m√©dicaux f√©d√©ral"),
            ("Cotisation_old", "Cotisations totales"),
            ("CA_ae_old", "Assurance-emploi"),
            ("QC_rqap_old", "RQAP"),
            ("CA_rrq_old", "RRQ"),
            ("QC_fss_old", "FSS"),
            ("QC_ramq_old", "RAMQ"),
            ("Frais_garde_old", "Frais de garde")
        ]
        
        print("\nüéØ IDs √Ä UTILISER POUR LE SCRAPER:")
        for result_id, description in result_ids:
            print(f"   '{result_id}': '{description}'")
        
        print("\nüìù NOTES IMPORTANTES:")
        print("-" * 40)
        print("1. Les valeurs n√©gatives dans le tableau = montants √† payer")
        print("2. Les valeurs positives = cr√©dits/allocations re√ßus")
        print("3. QC_total et CA_total = r√©gimes fiscaux NETS (apr√®s cr√©dits)")
        print("4. Pour 2024: utiliser suffixe '_old'")
        print("5. Pour 2025: utiliser suffixe '_new'")
        
        print("\nüîÑ OPTIONS DU SELECT 'Situation':")
        print("-" * 40)
        try:
            select_element = Select(driver.find_element(By.ID, "Situation"))
            for option in select_element.options:
                print(f"   - Value: '{option.get_attribute('value')}', Text: '{option.text}'")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
    finally:
        input("\n‚è∏Ô∏è  Appuyez sur Entr√©e pour fermer...")
        driver.quit()

if __name__ == "__main__":
    analyze_mfq_structure()