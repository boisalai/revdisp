#!/usr/bin/env python3
"""
Scraper Python/Selenium pour le calculateur officiel du Qu√©bec
Remplace le scraper Puppeteer d√©faillant
"""

import json
import time
import sys
from typing import Dict, Any, Optional
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

class QuebecCalculatorScraper:
    def __init__(self, headless: bool = True, timeout: int = 30):
        self.timeout = timeout
        self.driver = None
        self.setup_driver(headless)
    
    def setup_driver(self, headless: bool):
        """Configure le driver Chrome avec les bonnes options"""
        chrome_options = Options()
        if headless:
            chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1280,720')
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.driver.implicitly_wait(10)
    
    def scrape_calculator(self, household_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Scrape le calculateur officiel avec les donn√©es du m√©nage
        
        Args:
            household_data: {
                "householdType": "single" | "couple" | "single_parent" | "retired_single" | "retired_couple",
                "primaryPerson": {
                    "age": int,
                    "grossWorkIncome": int,
                    "grossRetirementIncome": int,
                    "isRetired": bool
                },
                "spouse": { ... } | null,
                "numChildren": int,
                "taxYear": int
            }
        """
        try:
            print(f"üîç Scraping pour: {household_data.get('householdType', 'N/A')}")
            print(f"   Personne principale: {household_data['primaryPerson']['age']} ans")
            print(f"   Revenus: {household_data['primaryPerson'].get('grossWorkIncome', 0)}$ (travail)")
            print(f"   Revenus: {household_data['primaryPerson'].get('grossRetirementIncome', 0)}$ (retraite)")
            
            # Navigation vers le calculateur
            self.driver.get('https://www.finances.gouv.qc.ca/ministere/outils_services/outils_calcul/revenu_disponible/outil_revenu.asp')
            
            # G√©rer les cookies
            self._handle_cookies()
            
            # Attendre que le formulaire soit charg√©
            WebDriverWait(self.driver, self.timeout).until(
                EC.presence_of_element_located((By.ID, "Situation"))
            )
            
            # Remplir le formulaire
            self._fill_form(household_data)
            
            # Attendre que les calculs se stabilisent
            time.sleep(3)

            # Extraire les r√©sultats
            results = self._extract_results(household_data)
            
            print(f"‚úÖ R√©sultats extraits: RD={results.get('revenu_disponible', 'N/A')}")
            return results
            
        except Exception as e:
            print(f"‚ùå Erreur lors du scraping: {e}")
            return {"error": str(e)}
    
    def _handle_cookies(self):
        """G√©rer les popups de cookies"""
        try:
            # Attendre un peu pour que la popup apparaisse
            time.sleep(2)
            
            # Essayer plusieurs s√©lecteurs pour le bouton cookies
            cookie_selectors = [
                ".cookie-banner button",
                "[data-cookie-consent] button",
                "button[class*='cookie']",
                "//button[contains(text(), 'Accepter')]"
            ]
            
            for selector in cookie_selectors:
                try:
                    if selector.startswith('//'):
                        # XPath
                        button = self.driver.find_element(By.XPATH, selector)
                    else:
                        # CSS
                        button = self.driver.find_element(By.CSS_SELECTOR, selector)
                    
                    if button and button.is_displayed():
                        print("üç™ Acceptation des cookies...")
                        button.click()
                        time.sleep(1)
                        return
                        
                except:
                    continue
                    
        except Exception as e:
            print(f"‚ÑπÔ∏è  Gestion cookies: {e}")
    
    def _fill_form(self, household_data: Dict[str, Any]):
        """Remplir le formulaire avec les donn√©es du m√©nage"""
        print("üìù Remplissage du formulaire...")
        
        # 1. Situation familiale
        situation = self._map_household_type(household_data['householdType'])
        situation_select = Select(self.driver.find_element(By.ID, "Situation"))
        situation_select.select_by_visible_text(situation)
        time.sleep(0.5)
        
        # 2. Revenu personne principale
        primary = household_data['primaryPerson']
        revenus = primary.get('grossRetirementIncome', 0) if primary.get('isRetired') else primary.get('grossWorkIncome', 0)
        
        self._fill_field('#Revenu1', str(revenus))
        
        # 3. √Çge personne principale  
        self._fill_field('#AgeAdulte1', str(primary['age']))
        
        # 4. Conjoint (si applicable)
        if household_data.get('spouse'):
            spouse = household_data['spouse']
            spouse_revenus = spouse.get('grossRetirementIncome', 0) if spouse.get('isRetired') else spouse.get('grossWorkIncome', 0)
            
            self._fill_field('#Revenu2', str(spouse_revenus))
            self._fill_field('#AgeAdulte2', str(spouse['age']))
        
        # 5. Nombre d'enfants et leurs √¢ges
        children = household_data.get('children', [])
        num_children = len(children) if children else household_data.get('numChildren', 0)

        if num_children > 0:
            try:
                # Mapper le nombre d'enfants aux options du select
                children_options = {
                    1: "Un enfant",
                    2: "Deux enfants",
                    3: "Trois enfants",
                    4: "Quatre enfants",
                    5: "Cinq enfants"
                }

                children_select = Select(self.driver.find_element(By.ID, "NbEnfants"))

                # S√©lectionner le nombre d'enfants
                if num_children in children_options:
                    children_select.select_by_visible_text(children_options[num_children])
                    print(f"   ‚úÖ #NbEnfants: {num_children} enfant(s)")
                else:
                    print(f"   ‚ö†Ô∏è  Nombre d'enfants non support√©: {num_children}")

                # Attendre que les champs d'√¢ge apparaissent
                time.sleep(1)

                # Remplir l'√¢ge de chaque enfant si disponible
                if children:
                    for i, child in enumerate(children, start=1):
                        if i > 5:  # Maximum 5 enfants support√©s par le formulaire
                            print(f"   ‚ö†Ô∏è  Enfant {i} ignor√© (max 5 enfants)")
                            break

                        age = child.get('age', 0)
                        age_selector = f'#AgeEnfant{i}'

                        try:
                            self._fill_field(age_selector, str(age))
                            print(f"   ‚úÖ Enfant {i}: {age} ans")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è  Erreur √¢ge enfant {i}: {e}")

                # Attendre que les calculs se mettent √† jour apr√®s la saisie des √¢ges
                time.sleep(1)

            except Exception as e:
                print(f"   ‚ùå Erreur gestion enfants: {e}")
                raise

        print("‚úÖ Formulaire rempli")
    
    def _fill_field(self, selector: str, value: str):
        """Remplir un champ avec une valeur en utilisant plusieurs m√©thodes robustes"""
        try:
            # Trouver l'√©l√©ment
            element = self.driver.find_element(By.CSS_SELECTOR, selector)
            
            # M√©thode 1: Clear + send_keys
            element.clear()
            time.sleep(0.2)
            element.send_keys(value)
            time.sleep(0.2)
            
            # V√©rifier que la valeur a √©t√© saisie
            actual_value = element.get_attribute('value')
            if actual_value != value:
                print(f"   ‚ö†Ô∏è  M√©thode 1 √©chou√©e pour {selector}: attendu '{value}', obtenu '{actual_value}'")
                
                # M√©thode 2: JavaScript direct
                print(f"   üîÑ Tentative m√©thode JavaScript pour {selector}")
                self.driver.execute_script(f"document.querySelector('{selector}').value = '{value}';")
                time.sleep(0.2)
                
                # D√©clencher l'√©v√©nement onchange manuellement
                self.driver.execute_script(f"""
                    var element = document.querySelector('{selector}');
                    if (element && element.onchange) {{
                        element.onchange(new Event('change'));
                    }}
                    if (window.recalc_onclick) {{
                        window.recalc_onclick('{selector.replace('#', '')}');
                    }}
                """)
                time.sleep(0.5)
                
                # V√©rifier √† nouveau
                actual_value = element.get_attribute('value')
                if actual_value != value:
                    print(f"   ‚ùå M√©thode 2 aussi √©chou√©e pour {selector}: obtenu '{actual_value}'")
                else:
                    print(f"   ‚úÖ {selector}: {value} (m√©thode JavaScript)")
            else:
                # D√©clencher onchange pour m√©thode 1
                element.send_keys(Keys.TAB)
                time.sleep(0.3)
                print(f"   ‚úÖ {selector}: {value} (m√©thode standard)")
            
        except Exception as e:
            print(f"   ‚ùå Erreur remplissage {selector}: {e}")

    def _wait_for_calculation_complete(self, max_wait: int = 10) -> bool:
        """
        Attendre que le calculateur ait termin√© ses calculs.
        V√©rifie que la valeur du revenu disponible est calcul√©e et stable.

        Args:
            max_wait: Temps maximum d'attente en secondes

        Returns:
            True si le calcul est termin√©, False si timeout
        """
        print("   ‚è≥ Attente de la fin des calculs...")

        # D√©terminer le s√©lecteur selon l'ann√©e fiscale
        tax_year = 2025  # Par d√©faut
        rd_selector = '#RD_new' if tax_year >= 2025 else '#RD_old'

        previous_value = None
        stable_count = 0
        start_time = time.time()

        while (time.time() - start_time) < max_wait:
            try:
                # Extraire la valeur actuelle du revenu disponible
                element = self.driver.find_element(By.CSS_SELECTOR, rd_selector)
                current_value = element.get_attribute('value')

                # V√©rifier si la valeur a chang√©
                if current_value and current_value != '0' and current_value != '':
                    # Enlever les espaces pour comparer
                    clean_value = current_value.replace(' ', '').replace('\u202f', '')

                    # Si la valeur est stable pendant 2 v√©rifications cons√©cutives
                    if clean_value == previous_value:
                        stable_count += 1
                        if stable_count >= 2:
                            print(f"   ‚úÖ Calcul termin√© - Valeur stable: {current_value}")
                            # Attendre encore un peu pour √™tre s√ªr que tous les champs sont mis √† jour
                            time.sleep(1)
                            return True
                    else:
                        stable_count = 0
                        previous_value = clean_value

                time.sleep(0.5)

            except Exception as e:
                print(f"   ‚ö†Ô∏è  Erreur pendant l'attente: {e}")
                time.sleep(0.5)

        print(f"   ‚ö†Ô∏è  Timeout apr√®s {max_wait}s - utilisation des valeurs actuelles")
        return False

    def _extract_results(self, household_data: Dict[str, Any]) -> Dict[str, Any]:
        """Extraire les r√©sultats du calculateur"""
        print("üìä Extraction des r√©sultats...")

        results = {}

        # Attendre intelligemment que les calculs se terminent
        self._wait_for_calculation_complete()
        
        # Chercher sp√©cifiquement dans le tableau des r√©sultats
        print("   üéØ Recherche dans le tableau des r√©sultats...")
        try:
            # D'abord, attendre que les r√©sultats soient calcul√©s
            import re
            
            # Chercher des √©l√©ments de tableau ou de r√©sultats sp√©cifiques
            # D'apr√®s les captures, les r√©sultats apparaissent dans un tableau avec colonnes 2024, 2025, √âcart
            results_found = False
            
            # Essayer de trouver les cellules de tableau contenant les valeurs
            table_cells = self.driver.find_elements(By.CSS_SELECTOR, "td, th")
            print(f"   üìã Trouv√© {len(table_cells)} cellules de tableau")
            
            for cell in table_cells:
                try:
                    text = cell.text.strip()
                    
                    # Ignorer les ann√©es et titres
                    if text in ['2024', '2025', '√âcart', 'Revenu disponible', 'R√©gime fiscal du Qu√©bec', 'R√©gime fiscal f√©d√©ral', 'Cotisations', 'Frais de garde']:
                        continue
                    
                    # Chercher des nombres format√©s comme des montants
                    if re.match(r'^\d{1,2}\s\d{3}$', text):  # Format "34 088"
                        number = int(text.replace(' ', ''))
                        parent_text = ""
                        try:
                            parent_row = cell.find_element(By.XPATH, "..")
                            parent_text = parent_row.text.strip()
                        except:
                            pass
                            
                        # Identifier le type de r√©sultat bas√© sur le contexte de la ligne
                        if "disponible" in parent_text.lower():
                            results['revenu_disponible'] = number
                            print(f"   üí∞ Revenu disponible: {number}")
                            results_found = True
                        elif "qu√©bec" in parent_text.lower() and "r√©gime" in parent_text.lower():
                            results['qc_regime_fiscal_total'] = number
                            print(f"   üèõÔ∏è  R√©gime fiscal QC: {number}")
                            results_found = True
                        elif "f√©d√©ral" in parent_text.lower() and "r√©gime" in parent_text.lower():
                            results['ca_regime_fiscal_total'] = number
                            print(f"   üçÅ R√©gime fiscal f√©d√©ral: {number}")
                            results_found = True
                        elif "cotisations" in parent_text.lower():
                            # Les cotisations sont n√©gatives, mais le tableau peut montrer la valeur positive
                            results['cotisations_total'] = -abs(number)  # Force negative
                            print(f"   üíº Cotisations: -{number}")
                            results_found = True
                    
                    # Aussi chercher les tirets pour les valeurs nulles
                    elif text == '‚Äî' or text == '-':
                        parent_text = ""
                        try:
                            parent_row = cell.find_element(By.XPATH, "..")
                            parent_text = parent_row.text.strip()
                        except:
                            pass
                        
                        if "garde" in parent_text.lower():
                            results['frais_garde'] = 0
                            print(f"   üë∂ Frais de garde: 0 (tiret)")
                            
                except Exception:
                    continue
            
            if not results_found:
                print("   ‚ö†Ô∏è  Aucune valeur trouv√©e dans le tableau, recherche alternative...")
                
        except Exception as e:
            print(f"   ‚ùå Erreur recherche automatique: {e}")

        # TOUJOURS utiliser les s√©lecteurs CSS pour garantir que tous les champs sont captur√©s
        # Utiliser *_old pour 2024 et *_new pour 2025
        # La recherche automatique peut manquer des champs, donc on compl√®te avec CSS
        print("   üéØ Extraction via s√©lecteurs CSS...")

        # Pour 2024, utiliser les s√©lecteurs _old
        selectors_2024 = {
            'revenu_disponible': '#RD_old',
            'ae_total': '#CA_ae_old',
            'rrq_total': '#CA_rrq_old',
            'rqap_total': '#QC_rqap_old',
            'qc_regime_fiscal_total': '#QC_total_old',
            'ca_regime_fiscal_total': '#CA_total_old',
            'qc_impot': '#QC_impot_old',  # Imp√¥t QC individuel
            'ca_impot': '#CA_impot_old',  # Imp√¥t f√©d√©ral individuel
            'qc_solidarite': '#QC_sol_old',
            'ca_tps': '#CA_tps_old',
            'ca_pfrt': '#CA_pfrt_old',
            'qc_prime_travail': '#QC_pt_old',
            'ramq': '#QC_ramq_old',
            'fss': '#QC_fss_old',
            'qc_allocation_famille': '#QC_sae_old',
            'qc_fournitures_scolaires': '#SFS_old',
            'qc_garde_enfants': '#QC_garde_old',
            'qc_allocation_logement': '#QC_al_old',
            'qc_soutien_aines': '#QC_aines_old',
            'ca_allocation_enfants': '#CA_ace_old',
            'ca_pension_securite': '#CA_psv_old',
            'qc_aide_sociale': '#QC_adr_old',
            'qc_frais_medicaux': '#QC_medic_old',
            'ca_frais_medicaux': '#CA_medic_old',
            'cotisations_total': '#Cotisation_old'
        }

        # Pour 2025, utiliser les s√©lecteurs _new
        selectors_2025 = {
            'revenu_disponible': '#RD_new',
            'ae_total': '#CA_ae_new',
            'rrq_total': '#CA_rrq_new',
            'rqap_total': '#QC_rqap_new',
            'qc_regime_fiscal_total': '#QC_total_new',
            'ca_regime_fiscal_total': '#CA_total_new',
            'qc_impot': '#QC_impot_new',  # Imp√¥t QC individuel
            'ca_impot': '#CA_impot_new',  # Imp√¥t f√©d√©ral individuel
            'qc_solidarite': '#QC_sol_new',
            'ca_tps': '#CA_tps_new',
            'ca_pfrt': '#CA_pfrt_new',
            'qc_prime_travail': '#QC_pt_new',
            'ramq': '#QC_ramq_new',
            'fss': '#QC_fss_new',
            'qc_allocation_famille': '#QC_sae_new',
            'qc_fournitures_scolaires': '#SFS_new',
            'qc_garde_enfants': '#QC_garde_new',
            'qc_allocation_logement': '#QC_al_new',
            'qc_soutien_aines': '#QC_aines_new',
            'ca_allocation_enfants': '#CA_ace_new',
            'ca_pension_securite': '#CA_psv_new',
            'qc_aide_sociale': '#QC_adr_new',
            'qc_frais_medicaux': '#QC_medic_new',
            'ca_frais_medicaux': '#CA_medic_new',
            'cotisations_total': '#Cotisation_new'
        }

        # Utiliser les s√©lecteurs appropri√©s selon l'ann√©e fiscale
        tax_year = household_data.get('taxYear', 2024)
        selectors = selectors_2025 if tax_year >= 2025 else selectors_2024

        print(f"   üìÖ Ann√©e fiscale: {tax_year}, s√©lecteurs: {'2025 (_new)' if tax_year >= 2025 else '2024 (_old)'}")

        for key, selector in selectors.items():
            try:
                value = self._extract_numeric_value(selector)
                if value is not None:
                    results[key] = value
                    print(f"   üìã {key}: {value} (CSS: {selector})")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  {key}: {e}")
                results[key] = None
        
        print(f"   üìä R√©sultats finaux: {results}")
        return results
    
    def _extract_numeric_value(self, selector: str) -> Optional[float]:
        """Extraire une valeur num√©rique d'un √©l√©ment"""
        try:
            element = self.driver.find_element(By.CSS_SELECTOR, selector)
            
            # R√©cup√©rer le texte selon le type d'√©l√©ment
            if element.tag_name == 'input':
                text = element.get_attribute('value') or ''
            else:
                text = element.text.strip()
            
            # V√©rifier si c'est un tiret (pas de valeur)
            if not text or text in ['‚Äï', '‚Äî', '-', '']:
                return None
            
            # Nettoyer le texte (enlever espaces, garder chiffres et s√©parateurs)
            cleaned = ''.join(c for c in text if c.isdigit() or c in '.,- ')
            cleaned = cleaned.replace(' ', '').replace(',', '.')
            
            # G√©rer les valeurs n√©gatives
            is_negative = '-' in cleaned or '‚àí' in text
            cleaned = cleaned.replace('-', '').replace('‚àí', '')
            
            if not cleaned:
                return None
                
            value = float(cleaned)
            return -value if is_negative else value
            
        except Exception as e:
            return None
    
    def _map_household_type(self, household_type: str) -> str:
        """Mapper notre type de m√©nage vers les valeurs du calculateur officiel"""
        mapping = {
            'single': 'Personne vivant seule',
            'single_parent': 'Famille monoparentale', 
            'couple': 'Couple',
            'retired_single': 'Retrait√© vivant seul',
            'retired_couple': 'Couple de retrait√©s'
        }
        return mapping.get(household_type, 'Personne vivant seule')
    
    def close(self):
        """Fermer le driver"""
        if self.driver:
            self.driver.quit()

def main():
    """Fonction principale pour utilisation en ligne de commande"""
    if len(sys.argv) != 2:
        print("Usage: python calculator_scraper.py <json_data>")
        sys.exit(1)
    
    try:
        # Lire les donn√©es JSON depuis l'argument
        household_data = json.loads(sys.argv[1])
        
        # Cr√©er le scraper
        scraper = QuebecCalculatorScraper(headless=True)
        
        # Scraper le calculateur
        results = scraper.scrape_calculator(household_data)
        
        # Fermer le scraper
        scraper.close()
        
        # Retourner les r√©sultats en JSON
        print(json.dumps(results, ensure_ascii=False))
        
    except Exception as e:
        print(json.dumps({"error": str(e)}, ensure_ascii=False))
        sys.exit(1)

if __name__ == "__main__":
    main()