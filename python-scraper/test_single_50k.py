#!/usr/bin/env python
"""
Test sp√©cifique : personne seule, 35 ans, 50000$ de revenu
"""

from mfq_scraper_simple import MFQScraperSimple
import json

def test_single_50k():
    """Test pour personne seule 35 ans avec 50000$ de revenu"""
    
    household = {
        'householdType': 'single',
        'primaryPerson': {
            'age': 35,
            'grossWorkIncome': 50000,
            'grossRetirementIncome': 0,
            'isRetired': False
        },
        'spouse': None,
        'numChildren': 0,
        'taxYear': 2024
    }
    
    print("üß™ TEST CALCULATEUR MFQ OFFICIEL")
    print("=" * 60)
    print("üìä Configuration:")
    print("   - Type: Personne vivant seule")
    print("   - √Çge: 35 ans")
    print("   - Revenu brut de travail: 50 000$")
    print("   - Ann√©e: 2024")
    print()
    
    scraper = MFQScraperSimple(headless=True)
    try:
        print("üîç Lancement du scraper...")
        results = scraper.scrape(household)
        
        if results.get('success'):
            print("\n‚úÖ R√âSULTATS DU CALCULATEUR OFFICIEL MFQ (2024):")
            print("=" * 60)
            
            # Afficher le revenu disponible en premier
            print(f"\nüí∞ REVENU DISPONIBLE: {results.get('revenu_disponible', 0):,.0f}$")
            
            # R√©gime fiscal du Qu√©bec
            print("\nüèõÔ∏è R√âGIME FISCAL DU QU√âBEC:")
            print("-" * 40)
            print(f"{'R√©gime fiscal QC (net)':30} : {results.get('qc_impot_total', 0):>10,.0f}$")
            print(f"{'Imp√¥t sur le revenu QC':30} : {results.get('qc_impot', 0):>10,.0f}$")
            print(f"{'Cr√©dit pour la solidarit√©':30} : {results.get('qc_solidarite', 0):>10,.0f}$")
            print(f"{'Prime au travail':30} : {results.get('qc_prime_travail', 0):>10,.0f}$")
            print(f"{'Allocation famille':30} : {results.get('qc_allocation_famille', 0):>10,.0f}$")
            print(f"{'Allocation-logement':30} : {results.get('qc_allocation_logement', 0):>10,.0f}$")
            
            # R√©gime fiscal f√©d√©ral
            print("\nüçÅ R√âGIME FISCAL F√âD√âRAL:")
            print("-" * 40)
            print(f"{'R√©gime fiscal f√©d√©ral (net)':30} : {results.get('ca_impot_total', 0):>10,.0f}$")
            print(f"{'Imp√¥t sur le revenu f√©d√©ral':30} : {results.get('ca_impot', 0):>10,.0f}$")
            print(f"{'Cr√©dit pour la TPS':30} : {results.get('ca_tps', 0):>10,.0f}$")
            print(f"{'ACT (travailleurs)':30} : {results.get('ca_pfrt', 0):>10,.0f}$")
            
            # Cotisations
            print("\nüíº COTISATIONS:")
            print("-" * 40)
            print(f"{'Cotisations totales':30} : {results.get('cotisations_total', 0):>10,.0f}$")
            print(f"{'Assurance-emploi':30} : {results.get('ae_total', 0):>10,.0f}$")
            print(f"{'RRQ':30} : {results.get('rrq_total', 0):>10,.0f}$")
            print(f"{'RQAP':30} : {results.get('rqap_total', 0):>10,.0f}$")
            print(f"{'RAMQ':30} : {results.get('ramq', 0):>10,.0f}$")
            print(f"{'FSS':30} : {results.get('fss', 0):>10,.0f}$")
            
            # R√©sum√©
            print("\nüìä R√âSUM√â:")
            print("-" * 40)
            revenu_brut = 50000
            revenu_disponible = results.get('revenu_disponible', 0)
            total_deductions = revenu_brut - revenu_disponible
            taux_effectif = (total_deductions / revenu_brut) * 100 if revenu_brut > 0 else 0
            
            print(f"Revenu brut:        {revenu_brut:>10,.0f}$")
            print(f"Revenu disponible:  {revenu_disponible:>10,.0f}$")
            print(f"Total d√©ductions:   {total_deductions:>10,.0f}$")
            print(f"Taux effectif:      {taux_effectif:>10.1f}%")
            
        else:
            print(f"‚ùå Erreur: {results.get('error')}")
            
    except Exception as e:
        print(f"‚ùå Exception: {e}")
        import traceback
        traceback.print_exc()
    finally:
        scraper.close()

if __name__ == "__main__":
    test_single_50k()