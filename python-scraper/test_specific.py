#!/usr/bin/env python
"""
Test sp√©cifique pour le cas: single, 51 ans, 14868$ de revenu
Pour v√©rifier que nous capturons bien l'allocation-logement et autres valeurs
"""

from calculator_scraper import QuebecCalculatorScraper
import json

def main():
    """Test avec le cas exact de l'utilisateur"""
    
    # Configuration exacte du test (format attendu par le scraper)
    household = {
        'householdType': 'single',
        'primaryPerson': {
            'age': 51,
            'grossWorkIncome': 14868,
            'grossRetirementIncome': 0,
            'isRetired': False
        },
        'spouse': None,
        'numChildren': 0,
        'taxYear': 2024
    }
    
    print("üß™ TEST SP√âCIFIQUE - Personne seule, 51 ans, 14868$")
    print("=" * 60)
    print(f"üìä Configuration:")
    print(f"   - Type: {household['householdType']}")
    print(f"   - √Çge: {household['primaryPerson']['age']} ans")
    print(f"   - Revenus travail: {household['primaryPerson']['grossWorkIncome']}$")
    print()
    
    # Lancer le scraper
    scraper = QuebecCalculatorScraper()
    try:
        results = scraper.scrape_calculator(household)
        
        print("‚úÖ R√©sultats extraits:")
        print("=" * 60)
        
        # Afficher tous les r√©sultats trouv√©s
        for key, value in sorted(results.items()):
            if key not in ['timestamp', 'success', 'error']:
                if value is not None and value != 0:
                    print(f"   {key}: {value}")
        
        print()
        print("üìã Valeurs attendues selon la capture d'√©cran:")
        print("   - Revenu disponible: 21826$")
        print("   - R√©gime fiscal QC: 4021$")
        print("   - Prime au travail: 1000$")
        print("   - Cr√©dit solidarit√©: 1221$")
        print("   - Allocation-logement: 1800$ ‚ö†Ô∏è")
        print("   - R√©gime fiscal f√©d√©ral: 3935$")
        print("   - Cr√©dit TPS: 414$")
        print("   - ACT: 3520$")
        print("   - Cotisations: -997$")
        print()
        
        # V√©rifier si allocation-logement est captur√©e
        if 'qc_allocation_logement' in results:
            if results['qc_allocation_logement'] == 1800:
                print("‚úÖ Allocation-logement correctement captur√©e!")
            else:
                print(f"‚ùå Allocation-logement incorrecte: {results['qc_allocation_logement']}$ vs 1800$ attendu")
        else:
            print("‚ùå Allocation-logement NON captur√©e dans les r√©sultats")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    finally:
        scraper.close()

if __name__ == "__main__":
    main()