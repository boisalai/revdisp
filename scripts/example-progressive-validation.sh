#!/bin/bash

# Script de d√©monstration pour la validation progressive
# Montre les capacit√©s du nouveau syst√®me de validation 10‚Üí100‚Üí1000+ cas

echo "üßÆ D√âMONSTRATION - Validation Progressive RevDisp"
echo "==============================================="
echo ""
echo "Ce script d√©montre le nouveau syst√®me de validation progressive qui"
echo "compare notre calculateur avec le calculateur officiel du MFQ en"  
echo "progressant de 10 ‚Üí 100 ‚Üí 1000+ cas de test automatiquement."
echo ""

# V√©rifier les pr√©requis
echo "üîß V√©rification des pr√©requis..."
echo ""

# Node.js
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js non trouv√©. Installez Node.js 18+ pour continuer."
    exit 1
fi

NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo "‚ùå Node.js version trop ancienne ($NODE_VERSION). Version 18+ requise."
    exit 1
fi

echo "‚úÖ Node.js $(node --version)"

# NPM et packages
if [ ! -d "node_modules" ]; then
    echo "üì¶ Installation des d√©pendances..."
    npm install
fi

# Puppeteer
if [ ! -d "node_modules/puppeteer" ]; then
    echo "üì¶ Installation de Puppeteer pour le scraping..."
    npm install puppeteer
fi

echo "‚úÖ D√©pendances install√©es"

# V√©rifier la connexion internet
echo ""
echo "üåê V√©rification de la connexion au calculateur officiel MFQ..."
if curl -s --head "https://www.finances.gouv.qc.ca" | head -n 1 | grep -q "200 OK"; then
    echo "‚úÖ Calculateur officiel accessible"
else
    echo "‚ö†Ô∏è  Calculateur officiel non accessible - la validation peut √©chouer"
    echo "   V√©rifiez votre connexion internet et r√©essayez plus tard"
fi

echo ""
echo "üéØ CHOIX DU MODE DE D√âMONSTRATION"
echo "================================"
echo ""
echo "S√©lectionnez le niveau de d√©monstration:"
echo "1) üöÄ RAPIDE    - 10 cas seulement (2-3 minutes)"
echo "2) üìä STANDARD  - Validation progressive compl√®te (15-20 minutes)"  
echo "3) üîç D√âTAILL√â  - Avec analyse verbose et rapports (20-30 minutes)"
echo "4) ‚ÑπÔ∏è  AIDE     - Voir toutes les options disponibles"
echo ""

read -p "Votre choix (1-4): " CHOICE

case $CHOICE in
    1)
        echo ""
        echo "üöÄ MODE RAPIDE - Validation de 10 cas repr√©sentatifs"
        echo "==================================================="
        echo ""
        echo "Cette d√©monstration ex√©cute seulement la Phase 1 (10 cas)"
        echo "pour montrer rapidement le fonctionnement du syst√®me."
        echo ""
        
        # Cr√©er configuration temporaire pour mode rapide
        TEMP_DIR="./demo-progressive-$(date +%s)"
        mkdir -p "$TEMP_DIR"
        
        echo "üìÅ R√©pertoire: $TEMP_DIR"
        echo ""
        
        # Lancer seulement 10 cas avec la strat√©gie systematique
        echo "‚è≥ Lancement de la validation..."
        npx tsx src/lib/validation/cli/RunProgressiveValidation.ts \
            --year 2024 \
            --output "$TEMP_DIR" \
            --verbose
        
        VALIDATION_EXIT_CODE=$?
        ;;
        
    2)
        echo ""
        echo "üìä MODE STANDARD - Validation Progressive Compl√®te"
        echo "================================================="
        echo ""
        echo "Cette d√©monstration ex√©cute les 3 phases compl√®tes:"
        echo "‚Ä¢ Phase 1: 10 cas repr√©sentatifs"
        echo "‚Ä¢ Phase 2: 100 cas diversifi√©s"  
        echo "‚Ä¢ Phase 3: 1000+ cas Monte Carlo"
        echo ""
        echo "‚è±Ô∏è  Temps estim√©: 15-20 minutes"
        echo ""
        
        read -p "Continuer? (y/N): " CONFIRM
        if [[ $CONFIRM =~ ^[Yy]$ ]]; then
            TEMP_DIR="./demo-progressive-full-$(date +%s)"
            mkdir -p "$TEMP_DIR"
            
            echo "üìÅ R√©pertoire: $TEMP_DIR"
            echo ""
            echo "‚è≥ Lancement de la validation progressive compl√®te..."
            
            npx tsx src/lib/validation/cli/RunProgressiveValidation.ts \
                --year 2024 \
                --output "$TEMP_DIR"
            
            VALIDATION_EXIT_CODE=$?
        else
            echo "D√©monstration annul√©e."
            exit 0
        fi
        ;;
        
    3)
        echo ""
        echo "üîç MODE D√âTAILL√â - Validation avec Analyse Compl√®te"
        echo "=================================================="
        echo ""
        echo "Cette d√©monstration inclut:"
        echo "‚Ä¢ Validation progressive compl√®te (3 phases)"
        echo "‚Ä¢ Logs d√©taill√©s en temps r√©el"
        echo "‚Ä¢ Rapport HTML interactif"
        echo "‚Ä¢ Analyse approfondie des √©carts"
        echo ""
        echo "‚è±Ô∏è  Temps estim√©: 20-30 minutes"
        echo ""
        
        read -p "Continuer? (y/N): " CONFIRM
        if [[ $CONFIRM =~ ^[Yy]$ ]]; then
            TEMP_DIR="./demo-progressive-detailed-$(date +%s)"
            mkdir -p "$TEMP_DIR"
            
            echo "üìÅ R√©pertoire: $TEMP_DIR"
            echo ""
            echo "‚è≥ Lancement de la validation progressive d√©taill√©e..."
            
            npx tsx src/lib/validation/cli/RunProgressiveValidation.ts \
                --year 2024 \
                --output "$TEMP_DIR" \
                --verbose
            
            VALIDATION_EXIT_CODE=$?
            
            # Ouvrir le rapport HTML automatiquement si disponible
            if [ $VALIDATION_EXIT_CODE -eq 0 ]; then
                HTML_REPORT="$TEMP_DIR/progressive-validation-report.html"
                if [ -f "$HTML_REPORT" ]; then
                    echo ""
                    echo "üåê Ouverture du rapport HTML..."
                    if command -v open &> /dev/null; then
                        open "$HTML_REPORT"  # macOS
                    elif command -v xdg-open &> /dev/null; then
                        xdg-open "$HTML_REPORT"  # Linux
                    fi
                fi
            fi
        else
            echo "D√©monstration annul√©e."
            exit 0
        fi
        ;;
        
    4)
        echo ""
        echo "‚ÑπÔ∏è  AIDE - Options Disponibles"
        echo "============================="
        echo ""
        echo "Commandes directes disponibles:"
        echo ""
        echo "‚Ä¢ npm run validate:progressive"
        echo "  ‚Üí Validation progressive standard 2024"
        echo ""
        echo "‚Ä¢ npm run validate:progressive:2025" 
        echo "  ‚Üí Validation pour ann√©e sp√©cifique"
        echo ""
        echo "‚Ä¢ npm run validate:progressive -- --help"
        echo "  ‚Üí Aide compl√®te avec toutes les options"
        echo ""
        echo "‚Ä¢ npm run validate:progressive -- --year 2024 --verbose"
        echo "  ‚Üí Validation avec logs d√©taill√©s"
        echo ""
        echo "Autres syst√®mes de validation:"
        echo ""
        echo "‚Ä¢ npm run validate:high-volume -- -n 1000"
        echo "  ‚Üí Validation haute performance directe"
        echo ""
        echo "‚Ä¢ npm run validate:generate -- -n 500 -s monte_carlo"
        echo "  ‚Üí G√©n√©ration de cas de test seulement"
        echo ""
        echo "Consultez VALIDATION-SYSTEM.md pour la documentation compl√®te."
        exit 0
        ;;
        
    *)
        echo "‚ùå Choix invalide. Relancez le script et choisissez 1, 2, 3 ou 4."
        exit 1
        ;;
esac

# Analyse des r√©sultats
echo ""
echo "üìã ANALYSE DES R√âSULTATS"
echo "======================="
echo ""

if [ $VALIDATION_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ VALIDATION R√âUSSIE!"
    echo ""
    echo "üìÅ Fichiers g√©n√©r√©s dans: $TEMP_DIR"
    echo ""
    
    # Lister les fichiers cr√©√©s
    if [ -d "$TEMP_DIR" ]; then
        echo "üìÑ Rapports disponibles:"
        find "$TEMP_DIR" -name "*.json" -o -name "*.html" | while read file; do
            echo "   ‚Ä¢ $(basename "$file")"
        done
        echo ""
        
        # Montrer le r√©sum√© s'il existe
        SUMMARY_FILE="$TEMP_DIR/progressive-validation-summary.json"
        if [ -f "$SUMMARY_FILE" ]; then
            echo "üìä R√©sum√© rapide:"
            if command -v jq &> /dev/null; then
                echo "   Pr√©cision finale: $(jq -r '.overallAnalysis.accuracyTrend[-1]' "$SUMMARY_FILE")%"
                echo "   Cas trait√©s: $(jq -r '.overallAnalysis.totalCasesProcessed' "$SUMMARY_FILE")"
                echo "   Programmes critiques: $(jq -r '.overallAnalysis.criticalPrograms | length' "$SUMMARY_FILE")"
            else
                echo "   (Installez 'jq' pour voir le r√©sum√© JSON)"
            fi
            echo ""
        fi
    fi
    
    echo "üéØ PROCHAINES √âTAPES RECOMMAND√âES:"
    echo ""
    echo "1. Examiner le rapport HTML pour l'analyse visuelle"
    echo "2. Identifier les programmes n√©cessitant correction"  
    echo "3. Appliquer les recommandations prioritaires"
    echo "4. Relancer la validation apr√®s corrections"
    echo ""
    echo "üìñ Documentation compl√®te: VALIDATION-SYSTEM.md"
    echo "üîß Code source: src/lib/validation/"
    
else
    echo "‚ùå VALIDATION √âCHOU√âE (Code: $VALIDATION_EXIT_CODE)"
    echo ""
    echo "üîç SOLUTIONS POSSIBLES:"
    echo ""
    echo "1. V√©rifiez votre connexion Internet"
    echo "2. V√©rifiez que le calculateur MFQ est accessible"
    echo "3. R√©essayez avec moins de parall√©lisme:"
    echo "   npm run validate:progressive -- --verbose"
    echo "4. Consultez les logs d'erreur dans: $TEMP_DIR"
    echo ""
    echo "üìû Pour plus d'aide, consultez VALIDATION-SYSTEM.md"
fi

echo ""
echo "üßÆ D√©monstration termin√©e."
echo ""

exit $VALIDATION_EXIT_CODE