/**
 * Script de validation progressive pour comparer syst√©matiquement notre calculateur
 * avec le calculateur officiel du minist√®re des Finances du Qu√©bec
 * 
 * Progression: 10 ‚Üí 100 ‚Üí 1000+ cas de test avec analyse des √©carts
 * et recommandations pour corrections prioritaires
 */

import { HighVolumeValidator, HighVolumeConfig } from './HighVolumeValidator'
import { MassTestGenerator } from './MassTestGenerator'
import { ValidationEngine } from './ValidationEngine'
import { OfficialValidationEngine, OfficialValidationReport } from './OfficialValidationEngine'
import { HouseholdType, Household } from '../models'
import * as fs from 'fs'
import * as path from 'path'

export interface ProgressiveValidationConfig {
  /** Ann√©e fiscale pour la validation */
  taxYear: number
  /** R√©pertoire de base pour tous les rapports */
  baseOutputDir: string
  /** Activer le mode verbose pour plus de logs */
  verbose?: boolean
}

export interface ProgressiveValidationSummary {
  phases: {
    phase1_10cases: ProgressivePhaseResult
    phase2_100cases: ProgressivePhaseResult
    phase3_1000cases: ProgressivePhaseResult
  }
  overallAnalysis: {
    criticalPrograms: string[]
    recommendedFixes: string[]
    accuracyTrend: number[]
    totalCasesProcessed: number
  }
}

export interface ProgressivePhaseResult {
  casesCount: number
  accuracy: number
  worstPrograms: Array<{
    program: string
    averageError: number
    errorRate: number
  }>
  criticalIssues: string[]
  processingTime: number
}

export class ProgressiveValidationRunner {
  private config: ProgressiveValidationConfig
  private validationEngine: ValidationEngine
  private officialValidationEngine: OfficialValidationEngine

  constructor(config: ProgressiveValidationConfig) {
    this.config = config
    this.validationEngine = new ValidationEngine(config.taxYear)
    this.officialValidationEngine = new OfficialValidationEngine(config.taxYear)
  }

  /**
   * Lance la validation progressive avec le calculateur officiel (RECOMMAND√â)
   */
  async runOfficialProgressiveValidation(): Promise<ProgressiveValidationSummary> {
    console.log('üöÄ VALIDATION PROGRESSIVE CONTRE CALCULATEUR OFFICIEL')
    console.log('====================================================')
    console.log(`üìÖ Ann√©e fiscale: ${this.config.taxYear}`)
    console.log(`üêç Utilisation du scraper Python/Selenium`)
    console.log(`üìÅ R√©pertoire de sortie: ${this.config.baseOutputDir}`)
    console.log()

    // Cr√©er le r√©pertoire de base
    if (!fs.existsSync(this.config.baseOutputDir)) {
      fs.mkdirSync(this.config.baseOutputDir, { recursive: true })
    }

    // Initialiser les moteurs de validation
    await this.officialValidationEngine.initialize()

    const phases: Record<string, ProgressivePhaseResult> = {}

    try {
      // Phase 1: 10 cas repr√©sentatifs avec validation officielle
      console.log('üéØ PHASE 1: VALIDATION OFFICIELLE INITIALE (10 cas)')
      console.log('=================================================')
      phases.phase1_10cases = await this.runOfficialPhase(10, 'phase1-10cases-official')

      // Phase 2: 25 cas diversifi√©s (limite raisonnable pour scraping)
      console.log()
      console.log('üéØ PHASE 2: VALIDATION OFFICIELLE √âTENDUE (25 cas)')
      console.log('================================================')
      phases.phase2_100cases = await this.runOfficialPhase(25, 'phase2-25cases-official')

      // Phase 3: Validation cibl√©e sur les programmes probl√©matiques
      console.log()
      console.log('üéØ PHASE 3: VALIDATION CIBL√âE (cas critiques)')
      console.log('===========================================')
      phases.phase3_1000cases = await this.runTargetedOfficialPhase(phases, 'phase3-targeted-official')

      // Analyse globale et recommandations
      const summary = this.generateProgressiveSummary(phases)

      // Sauvegarder le r√©sum√© final
      await this.saveProgressiveSummary(summary)

      console.log()
      console.log('‚úÖ VALIDATION PROGRESSIVE OFFICIELLE TERMIN√âE')
      console.log('============================================')
      this.printFinalSummary(summary)

      return summary

    } catch (error) {
      console.error('‚ùå Erreur lors de la validation progressive officielle:', error)
      throw error
    }
  }

  /**
   * Lance la validation progressive compl√®te (ancienne m√©thode)
   */
  async runProgressiveValidation(): Promise<ProgressiveValidationSummary> {
    console.log('üöÄ D√âMARRAGE DE LA VALIDATION PROGRESSIVE')
    console.log('========================================')
    console.log(`üìÖ Ann√©e fiscale: ${this.config.taxYear}`)
    console.log(`üìÅ R√©pertoire de sortie: ${this.config.baseOutputDir}`)
    console.log()

    // Cr√©er le r√©pertoire de base
    if (!fs.existsSync(this.config.baseOutputDir)) {
      fs.mkdirSync(this.config.baseOutputDir, { recursive: true })
    }

    // Initialiser les moteurs de validation
    await this.validationEngine.initialize()
    await this.officialValidationEngine.initialize()

    const phases: Record<string, ProgressivePhaseResult> = {}

    try {
      // Phase 1: 10 cas repr√©sentatifs
      console.log('üéØ PHASE 1: VALIDATION INITIALE (10 cas)')
      console.log('=======================================')
      phases.phase1_10cases = await this.runPhase(10, 'systematic', 'phase1-10cases')

      // Analyser les r√©sultats de la phase 1
      if (phases.phase1_10cases.accuracy < 80) {
        console.log('‚ö†Ô∏è  Pr√©cision insuffisante d√©tect√©e. Analyse approfondie requise avant phase 2.')
        await this.generateDetailedAnalysis(phases.phase1_10cases, 'phase1-detailed-analysis')
      }

      // Phase 2: 100 cas diversifi√©s
      console.log()
      console.log('üéØ PHASE 2: VALIDATION √âTENDUE (100 cas)')
      console.log('========================================')
      phases.phase2_100cases = await this.runPhase(100, 'grid', 'phase2-100cases')

      // Phase 3: 1000+ cas avec Monte Carlo
      console.log()
      console.log('üéØ PHASE 3: VALIDATION MASSIVE (1000+ cas)')
      console.log('==========================================')
      phases.phase3_1000cases = await this.runPhase(1000, 'monte_carlo', 'phase3-1000cases')

      // Analyse globale et recommandations
      const summary = this.generateProgressiveSummary(phases)

      // Sauvegarder le r√©sum√© final
      await this.saveProgressiveSummary(summary)

      console.log()
      console.log('‚úÖ VALIDATION PROGRESSIVE TERMIN√âE')
      console.log('==================================')
      this.printFinalSummary(summary)

      return summary

    } catch (error) {
      console.error('‚ùå Erreur lors de la validation progressive:', error)
      throw error
    }
  }

  /**
   * Ex√©cute une phase de validation officielle
   */
  private async runOfficialPhase(
    casesCount: number,
    phaseName: string
  ): Promise<ProgressivePhaseResult> {
    const startTime = Date.now()
    const phaseDir = path.join(this.config.baseOutputDir, phaseName)

    console.log(`üìä G√©n√©ration de ${casesCount} cas de test repr√©sentatifs...`)

    // G√©n√©rer des m√©nages types repr√©sentatifs
    const households = this.generateRepresentativeHouseholds(casesCount)
    
    console.log(`üåê Validation contre calculateur officiel (${households.length} cas)...`)
    
    // Valider contre le calculateur officiel
    const officialReport = await this.officialValidationEngine.validateAgainstOfficialCalculator(households)
    
    // Sauvegarder le rapport officiel
    if (!fs.existsSync(phaseDir)) {
      fs.mkdirSync(phaseDir, { recursive: true })
    }
    
    const reportPath = path.join(phaseDir, 'official-validation-report.json')
    fs.writeFileSync(reportPath, JSON.stringify(officialReport, null, 2))
    console.log(`üìä Rapport officiel sauv√©: ${reportPath}`)

    const processingTime = Date.now() - startTime

    // Convertir le rapport officiel vers le format ProgressivePhaseResult
    const phaseResult: ProgressivePhaseResult = {
      casesCount: households.length,
      accuracy: officialReport.summary.overallAccuracy,
      worstPrograms: this.convertToWorstPrograms(officialReport),
      criticalIssues: this.identifyOfficialCriticalIssues(officialReport),
      processingTime
    }

    console.log(`‚úÖ Phase officielle termin√©e en ${(processingTime / 1000).toFixed(1)}s`)
    console.log(`üìä Pr√©cision globale: ${phaseResult.accuracy.toFixed(1)}%`)
    console.log(`‚ö†Ô∏è Programmes probl√©matiques: ${phaseResult.worstPrograms.length}`)
    console.log(`üö® Issues critiques: ${phaseResult.criticalIssues.length}`)

    return phaseResult
  }

  /**
   * Ex√©cute une phase cibl√©e sur les programmes probl√©matiques identifi√©s
   */
  private async runTargetedOfficialPhase(
    previousPhases: Record<string, ProgressivePhaseResult>,
    phaseName: string
  ): Promise<ProgressivePhaseResult> {
    const startTime = Date.now()
    
    // Identifier les programmes probl√©matiques des phases pr√©c√©dentes
    const allWorstPrograms = [
      ...(previousPhases.phase1_10cases?.worstPrograms || []),
      ...(previousPhases.phase2_100cases?.worstPrograms || [])
    ]
    
    // G√©n√©rer des cas sp√©cifiquement pour tester ces programmes
    const targetedHouseholds = this.generateTargetedHouseholds(allWorstPrograms, 15)
    
    console.log(`üéØ G√©n√©ration de ${targetedHouseholds.length} cas cibl√©s pour programmes probl√©matiques`)
    const uniquePrograms = Array.from(new Set(allWorstPrograms.map(p => p.program)))
    console.log(`üìã Programmes cibl√©s: ${uniquePrograms.join(', ')}`)
    
    // Valider ces cas cibl√©s
    const officialReport = await this.officialValidationEngine.validateAgainstOfficialCalculator(targetedHouseholds)
    
    // Sauvegarder le rapport
    const phaseDir = path.join(this.config.baseOutputDir, phaseName)
    if (!fs.existsSync(phaseDir)) {
      fs.mkdirSync(phaseDir, { recursive: true })
    }
    
    const reportPath = path.join(phaseDir, 'targeted-validation-report.json')
    fs.writeFileSync(reportPath, JSON.stringify(officialReport, null, 2))
    
    const processingTime = Date.now() - startTime

    const phaseResult: ProgressivePhaseResult = {
      casesCount: targetedHouseholds.length,
      accuracy: officialReport.summary.overallAccuracy,
      worstPrograms: this.convertToWorstPrograms(officialReport),
      criticalIssues: this.identifyOfficialCriticalIssues(officialReport),
      processingTime
    }

    console.log(`‚úÖ Phase cibl√©e termin√©e en ${(processingTime / 1000).toFixed(1)}s`)
    console.log(`üìä Pr√©cision cibl√©e: ${phaseResult.accuracy.toFixed(1)}%`)

    return phaseResult
  }

  /**
   * G√©n√®re des m√©nages repr√©sentatifs pour la validation
   */
  private generateRepresentativeHouseholds(count: number): Household[] {
    const households: Household[] = []
    const generator = new MassTestGenerator({ taxYear: this.config.taxYear })
    
    // Distribution repr√©sentative du Qu√©bec
    const distribution = [
      { type: HouseholdType.SINGLE, ratio: 0.30 },
      { type: HouseholdType.COUPLE, ratio: 0.35 },
      { type: HouseholdType.SINGLE_PARENT, ratio: 0.15 },
      { type: HouseholdType.RETIRED_SINGLE, ratio: 0.10 },
      { type: HouseholdType.RETIRED_COUPLE, ratio: 0.10 }
    ]
    
    distribution.forEach(dist => {
      const typeCount = Math.round(count * dist.ratio)
      for (let i = 0; i < typeCount; i++) {
        const household = generator.generateHousehold(dist.type)
        households.push(household)
      }
    })
    
    return households.slice(0, count)
  }

  /**
   * G√©n√®re des cas cibl√©s pour tester des programmes sp√©cifiques
   */
  private generateTargetedHouseholds(
    worstPrograms: Array<{ program: string, averageError: number }>, 
    count: number
  ): Household[] {
    const households: Household[] = []
    const generator = new MassTestGenerator({ taxYear: this.config.taxYear })
    
    // G√©n√©rer des cas qui sollicitent les programmes probl√©matiques
    const programTypes: { [program: string]: HouseholdType[] } = {
      'assuranceEmploi': [HouseholdType.SINGLE, HouseholdType.COUPLE, HouseholdType.SINGLE_PARENT],
      'rrq': [HouseholdType.SINGLE, HouseholdType.COUPLE],
      'rqap': [HouseholdType.SINGLE, HouseholdType.COUPLE, HouseholdType.SINGLE_PARENT],
      'creditSolidarite': [HouseholdType.SINGLE, HouseholdType.SINGLE_PARENT],
      'primeTravail': [HouseholdType.SINGLE, HouseholdType.COUPLE, HouseholdType.SINGLE_PARENT]
    }
    
    worstPrograms.forEach(wp => {
      const types = programTypes[wp.program] || [HouseholdType.SINGLE]
      types.forEach(type => {
        if (households.length < count) {
          const household = generator.generateHousehold(type)
          households.push(household)
        }
      })
    })
    
    // Compl√©ter avec des cas vari√©s si n√©cessaire
    while (households.length < count) {
      const household = generator.generateHousehold(HouseholdType.SINGLE)
      households.push(household)
    }
    
    return households.slice(0, count)
  }

  /**
   * Convertit l'analyse des programmes officiels vers le format WorstPrograms
   */
  private convertToWorstPrograms(officialReport: OfficialValidationReport): Array<{
    program: string
    averageError: number
    errorRate: number
  }> {
    return officialReport.programAnalysis
      .filter(p => p.averageAccuracy < 90 || p.criticalErrorCount > 0)
      .map(p => ({
        program: p.program.toLowerCase().replace(/[^a-z0-9]/g, ''),
        averageError: 100 - p.averageAccuracy,
        errorRate: p.testCount > 0 ? (p.criticalErrorCount / p.testCount) * 100 : 0
      }))
      .sort((a, b) => b.averageError - a.averageError)
  }

  /**
   * Identifie les issues critiques depuis le rapport officiel
   */
  private identifyOfficialCriticalIssues(officialReport: OfficialValidationReport): string[] {
    const issues: string[] = []

    // Analyser la performance globale
    if (officialReport.summary.overallAccuracy < 70) {
      issues.push('Pr√©cision globale critique (<70%) - r√©vision majeure requise')
    }

    if (officialReport.summary.critical > officialReport.summary.totalTests * 0.3) {
      issues.push('Plus de 30% de cas critiques - probl√®mes syst√©miques d√©tect√©s')
    }

    if (officialReport.summary.errors > 0) {
      issues.push(`${officialReport.summary.errors} erreurs de scraping - v√©rifier connectivit√©`)
    }

    // Analyser les programmes critiques
    const criticalPrograms = officialReport.programAnalysis.filter(p => 
      p.averageAccuracy < 80 || p.criticalErrorCount > 0
    )
    
    if (criticalPrograms.length > 0) {
      issues.push(`Programmes critiques d√©tect√©s: ${criticalPrograms.map(p => p.program).join(', ')}`)
    }

    return issues
  }

  /**
   * Ex√©cute une phase de validation avec un nombre de cas sp√©cifique
   */
  private async runPhase(
    casesCount: number, 
    strategy: 'systematic' | 'random' | 'grid' | 'monte_carlo',
    phaseName: string
  ): Promise<ProgressivePhaseResult> {
    const startTime = Date.now()
    const phaseDir = path.join(this.config.baseOutputDir, phaseName)

    console.log(`üìä G√©n√©ration de ${casesCount} cas de test (strat√©gie: ${strategy})...`)

    // Configuration pour cette phase
    const highVolumeConfig: HighVolumeConfig = {
      generator: {
        totalCases: casesCount,
        taxYear: this.config.taxYear,
        // Distribution repr√©sentative du Qu√©bec
        householdDistribution: {
          single: 30,
          couple: 35,
          singleParent: 15,
          retiredSingle: 10,
          retiredCouple: 10
        },
        incomeRanges: {
          min: 15000,
          max: 150000,
          step: 5000
        }
      },
      generationStrategy: { type: strategy },
      scraping: {
        parallelBrowsers: Math.min(4, Math.ceil(casesCount / 50)), // Ajuster selon le volume
        batchDelay: casesCount > 100 ? 2000 : 1000, // Plus de d√©lai pour gros volumes
        batchSize: Math.min(20, Math.ceil(casesCount / 10)),
        headless: true,
        timeout: 30000,
        retries: 2
      },
      reporting: {
        outputDir: phaseDir,
        saveIntermediate: true,
        checkpointFrequency: Math.max(1, Math.floor(casesCount / 100))
      }
    }

    // Lancer la validation haute performance
    const validator = new HighVolumeValidator(highVolumeConfig)
    const validationReport = await validator.runHighVolumeValidation()

    const processingTime = Date.now() - startTime

    // Analyser les r√©sultats de la phase
    const phaseResult: ProgressivePhaseResult = {
      casesCount,
      accuracy: validationReport.summary.averageAccuracy,
      worstPrograms: this.identifyWorstPrograms(validationReport),
      criticalIssues: this.identifyCriticalIssues(validationReport),
      processingTime
    }

    console.log(`‚úÖ Phase termin√©e en ${(processingTime / 1000).toFixed(1)}s`)
    console.log(`üìä Pr√©cision globale: ${phaseResult.accuracy.toFixed(1)}%`)
    console.log(`‚ö†Ô∏è  Programmes probl√©matiques: ${phaseResult.worstPrograms.length}`)
    console.log(`üö® Issues critiques: ${phaseResult.criticalIssues.length}`)

    return phaseResult
  }

  /**
   * Identifie les programmes avec les pires performances
   */
  private identifyWorstPrograms(validationReport: any): Array<{
    program: string
    averageError: number
    errorRate: number
  }> {
    // Analyser les diff√©rences par programme (√† adapter selon la structure r√©elle du rapport)
    const programErrors: Record<string, { totalError: number, count: number, failures: number }> = {}

    // Simuler l'analyse - √† ajuster avec la vraie structure des donn√©es
    const programNames = [
      'assuranceEmploi', 'rrq', 'rqap', 'fss', 'ramq',
      'impotRevenuQuebec', 'impotRevenuFederal',
      'creditSolidarite', 'primeTravail', 'allocationFamiliale',
      'allocationCanadienneEnfants', 'creditTPS'
    ]

    for (const program of programNames) {
      programErrors[program] = { totalError: 0, count: 0, failures: 0 }
    }

    // Retourner les 5 pires programmes
    return Object.entries(programErrors)
      .map(([program, stats]) => ({
        program,
        averageError: stats.count > 0 ? stats.totalError / stats.count : 0,
        errorRate: stats.count > 0 ? (stats.failures / stats.count) * 100 : 0
      }))
      .sort((a, b) => b.averageError - a.averageError)
      .slice(0, 5)
  }

  /**
   * Identifie les issues critiques n√©cessitant correction imm√©diate
   */
  private identifyCriticalIssues(validationReport: any): string[] {
    const issues: string[] = []

    // Analyser les patterns d'erreurs critiques
    if (validationReport.summary.averageAccuracy < 70) {
      issues.push('Pr√©cision globale insuffisante (<70%) - r√©vision majeure requise')
    }

    if (validationReport.summary.failed / validationReport.summary.totalTests > 0.3) {
      issues.push('Taux d\'√©chec √©lev√© (>30%) - probl√®mes syst√©miques d√©tect√©s')
    }

    // Ajouter d'autres analyses critiques selon les patterns d√©tect√©s

    return issues
  }

  /**
   * G√©n√®re une analyse d√©taill√©e pour investigation approfondie
   */
  private async generateDetailedAnalysis(phaseResult: ProgressivePhaseResult, filename: string): Promise<void> {
    const analysis = {
      summary: phaseResult,
      detailedRecommendations: [
        '1. V√©rifier les param√®tres fiscaux pour l\'ann√©e ' + this.config.taxYear,
        '2. Valider les calculs des cotisations sociales (RRQ, AE, RQAP)',
        '3. Contr√¥ler les seuils et taux d\'imposition',
        '4. Examiner la logique des cr√©dits et allocations',
        '5. Tester les cas limites et transitions de paliers'
      ],
      nextSteps: [
        'Corriger les programmes identifi√©s comme probl√©matiques',
        'Ex√©cuter des tests unitaires cibl√©s',
        'Valider avec des cas de r√©f√©rence officiels',
        'Proc√©der √† la phase suivante si pr√©cision >80%'
      ]
    }

    const analysisPath = path.join(this.config.baseOutputDir, `${filename}.json`)
    fs.writeFileSync(analysisPath, JSON.stringify(analysis, null, 2))
    console.log(`üìã Analyse d√©taill√©e sauv√©e: ${analysisPath}`)
  }

  /**
   * G√©n√®re le r√©sum√© progressif complet
   */
  private generateProgressiveSummary(phases: Record<string, ProgressivePhaseResult>): ProgressiveValidationSummary {
    const accuracyTrend = [
      phases.phase1_10cases?.accuracy || 0,
      phases.phase2_100cases?.accuracy || 0,
      phases.phase3_1000cases?.accuracy || 0
    ]

    // Identifier les programmes critiques r√©currents
    const allWorstPrograms = [
      ...(phases.phase1_10cases?.worstPrograms || []),
      ...(phases.phase2_100cases?.worstPrograms || []),
      ...(phases.phase3_1000cases?.worstPrograms || [])
    ]

    const programCounts = allWorstPrograms.reduce((acc, prog) => {
      acc[prog.program] = (acc[prog.program] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    const criticalPrograms = Object.entries(programCounts)
      .filter(([, count]) => count >= 2) // Appara√Æt dans au moins 2 phases
      .map(([program]) => program)

    // G√©n√©rer les recommandations bas√©es sur les tendances
    const recommendedFixes = this.generateRecommendations(phases, criticalPrograms, accuracyTrend)

    return {
      phases: phases as any,
      overallAnalysis: {
        criticalPrograms,
        recommendedFixes,
        accuracyTrend,
        totalCasesProcessed: Object.values(phases).reduce((total, phase) => total + phase.casesCount, 0)
      }
    }
  }

  /**
   * G√©n√®re des recommandations intelligentes bas√©es sur l'analyse
   */
  private generateRecommendations(
    phases: Record<string, ProgressivePhaseResult>,
    criticalPrograms: string[],
    accuracyTrend: number[]
  ): string[] {
    const recommendations: string[] = []

    // Analyser la tendance de pr√©cision
    if (accuracyTrend[2] < accuracyTrend[1] && accuracyTrend[1] < accuracyTrend[0]) {
      recommendations.push('üî¥ URGENT: Pr√©cision en d√©croissance constante - r√©vision architecturale n√©cessaire')
    } else if (accuracyTrend[2] > accuracyTrend[0]) {
      recommendations.push('‚úÖ Tendance positive d√©tect√©e - continuer l\'am√©lioration progressive')
    }

    // Recommandations par programme critique
    criticalPrograms.forEach(program => {
      switch (program) {
        case 'assuranceEmploi':
          recommendations.push('üîß Corriger le calculateur d\'assurance-emploi: v√©rifier les seuils maximums et taux')
          break
        case 'rrq':
          recommendations.push('üîß Ajuster les calculs RRQ: valider les cotisations de base et additionnelles')
          break
        case 'impotRevenuQuebec':
          recommendations.push('üîß R√©viser l\'imp√¥t Qu√©bec: contr√¥ler les paliers et cr√©dits personnels')
          break
        case 'creditSolidarite':
          recommendations.push('üîß Affiner le cr√©dit de solidarit√©: examiner les seuils familiaux')
          break
        default:
          recommendations.push(`üîß Analyser le programme ${program}: √©carts syst√©matiques d√©tect√©s`)
      }
    })

    // Recommandations globales
    const overallAccuracy = accuracyTrend[accuracyTrend.length - 1]
    if (overallAccuracy < 85) {
      recommendations.push('üìö Organiser une revue compl√®te avec les r√©f√©rences officielles du MFQ')
      recommendations.push('üß™ Impl√©menter des tests unitaires pour chaque programme probl√©matique')
    }

    if (overallAccuracy >= 95) {
      recommendations.push('üéâ Pr√©cision excellente - syst√®me pr√™t pour production!')
      recommendations.push('üîÑ Planifier validation continue avec mise √† jour automatique des param√®tres')
    }

    return recommendations
  }

  /**
   * Sauvegarde le r√©sum√© progressif final
   */
  private async saveProgressiveSummary(summary: ProgressiveValidationSummary): Promise<void> {
    const summaryPath = path.join(this.config.baseOutputDir, 'progressive-validation-summary.json')
    fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2))

    // G√©n√©rer aussi un rapport HTML lisible
    const htmlReport = this.generateHtmlReport(summary)
    const htmlPath = path.join(this.config.baseOutputDir, 'progressive-validation-report.html')
    fs.writeFileSync(htmlPath, htmlReport)

    console.log(`üìä R√©sum√© progressif sauv√©: ${summaryPath}`)
    console.log(`üåê Rapport HTML g√©n√©r√©: ${htmlPath}`)
  }

  /**
   * G√©n√®re un rapport HTML lisible
   */
  private generateHtmlReport(summary: ProgressiveValidationSummary): string {
    return `
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de Validation Progressive - RevDisp ${this.config.taxYear}</title>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { text-align: center; border-bottom: 2px solid #0066cc; padding-bottom: 20px; margin-bottom: 30px; }
        .phase { background: #f9f9f9; padding: 20px; margin: 20px 0; border-radius: 8px; border-left: 4px solid #0066cc; }
        .metric { display: inline-block; margin: 10px 20px; text-align: center; }
        .metric-value { font-size: 2em; font-weight: bold; color: #0066cc; }
        .metric-label { font-size: 0.9em; color: #666; }
        .critical { color: #cc0000; }
        .warning { color: #ff6600; }
        .success { color: #009900; }
        .recommendations { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 10px 0; }
        .programs-list { display: flex; flex-wrap: wrap; }
        .program-item { background: #ffebee; padding: 8px 12px; margin: 4px; border-radius: 4px; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üßÆ Rapport de Validation Progressive</h1>
            <h2>Calculateur RevDisp - Ann√©e Fiscale ${this.config.taxYear}</h2>
            <p><strong>Total des cas trait√©s:</strong> ${summary.overallAnalysis.totalCasesProcessed.toLocaleString()}</p>
        </div>

        <div class="phase">
            <h3>üìä R√©sum√© des Phases</h3>
            <div class="metric">
                <div class="metric-value ${summary.phases.phase1_10cases.accuracy >= 80 ? 'success' : 'critical'}">${summary.phases.phase1_10cases.accuracy.toFixed(1)}%</div>
                <div class="metric-label">Phase 1 (10 cas)</div>
            </div>
            <div class="metric">
                <div class="metric-value ${summary.phases.phase2_100cases.accuracy >= 85 ? 'success' : 'warning'}">${summary.phases.phase2_100cases.accuracy.toFixed(1)}%</div>
                <div class="metric-label">Phase 2 (100 cas)</div>
            </div>
            <div class="metric">
                <div class="metric-value ${summary.phases.phase3_1000cases.accuracy >= 90 ? 'success' : 'warning'}">${summary.phases.phase3_1000cases.accuracy.toFixed(1)}%</div>
                <div class="metric-label">Phase 3 (1000+ cas)</div>
            </div>
        </div>

        <div class="phase">
            <h3>üö® Programmes Critiques</h3>
            <div class="programs-list">
                ${summary.overallAnalysis.criticalPrograms.map(program => 
                  `<div class="program-item">${program}</div>`
                ).join('')}
            </div>
            ${summary.overallAnalysis.criticalPrograms.length === 0 ? 
              '<p class="success">‚úÖ Aucun programme critique d√©tect√© - excellente performance!</p>' : ''
            }
        </div>

        <div class="recommendations">
            <h3>üí° Recommandations Prioritaires</h3>
            <ul>
                ${summary.overallAnalysis.recommendedFixes.map(fix => `<li>${fix}</li>`).join('')}
            </ul>
        </div>

        <div class="phase">
            <h3>üìà Tendance de Pr√©cision</h3>
            <p>√âvolution: ${summary.overallAnalysis.accuracyTrend.map((acc, i) => 
              `Phase ${i+1}: ${acc.toFixed(1)}%`
            ).join(' ‚Üí ')}</p>
        </div>

        <div style="text-align: center; margin-top: 30px; color: #666; font-size: 0.9em;">
            <p>Rapport g√©n√©r√© le ${new Date().toLocaleString('fr-CA')} par RevDisp Validation System</p>
        </div>
    </div>
</body>
</html>
    `
  }

  /**
   * Affiche le r√©sum√© final dans la console
   */
  private printFinalSummary(summary: ProgressiveValidationSummary): void {
    console.log()
    console.log('üìä R√âSUM√â FINAL DE LA VALIDATION PROGRESSIVE')
    console.log('==========================================')
    console.log()
    console.log(`üìà √âvolution de la pr√©cision:`)
    console.log(`   Phase 1 (10 cas):    ${summary.phases.phase1_10cases.accuracy.toFixed(1)}%`)
    console.log(`   Phase 2 (100 cas):   ${summary.phases.phase2_100cases.accuracy.toFixed(1)}%`)
    console.log(`   Phase 3 (1000+ cas): ${summary.phases.phase3_1000cases.accuracy.toFixed(1)}%`)
    console.log()
    console.log(`üö® Programmes n√©cessitant attention: ${summary.overallAnalysis.criticalPrograms.length}`)
    if (summary.overallAnalysis.criticalPrograms.length > 0) {
      summary.overallAnalysis.criticalPrograms.forEach(program => {
        console.log(`   ‚Ä¢ ${program}`)
      })
    }
    console.log()
    console.log(`üí° Recommandations principales:`)
    summary.overallAnalysis.recommendedFixes.slice(0, 3).forEach((rec, i) => {
      console.log(`   ${i + 1}. ${rec.replace(/üîß|üî¥|‚úÖ|üìö|üß™|üéâ|üîÑ/g, '')}`)
    })
    console.log()
    const finalAccuracy = summary.overallAnalysis.accuracyTrend[summary.overallAnalysis.accuracyTrend.length - 1]
    if (finalAccuracy >= 95) {
      console.log('üéâ SUCC√àS: Syst√®me valid√© avec excellente pr√©cision!')
    } else if (finalAccuracy >= 85) {
      console.log('‚úÖ ACCEPTABLE: Performance satisfaisante, am√©liorations possibles')
    } else {
      console.log('‚ö†Ô∏è  ATTENTION: Corrections requises avant production')
    }
  }
}

/**
 * Fonction utilitaire pour lancer rapidement une validation progressive officielle (RECOMMAND√â)
 */
export async function runQuickOfficialValidation(taxYear: number = 2024): Promise<void> {
  const config: ProgressiveValidationConfig = {
    taxYear,
    baseOutputDir: `./validation-reports/official-progressive-${taxYear}-${Date.now()}`,
    verbose: true
  }

  const runner = new ProgressiveValidationRunner(config)
  await runner.runOfficialProgressiveValidation()
}

/**
 * Fonction utilitaire pour lancer rapidement une validation progressive (ancienne m√©thode)
 */
export async function runQuickProgressiveValidation(taxYear: number = 2024): Promise<void> {
  const config: ProgressiveValidationConfig = {
    taxYear,
    baseOutputDir: `./validation-reports/progressive-${taxYear}-${Date.now()}`,
    verbose: true
  }

  const runner = new ProgressiveValidationRunner(config)
  await runner.runProgressiveValidation()
}