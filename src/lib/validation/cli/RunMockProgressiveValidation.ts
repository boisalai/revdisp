#!/usr/bin/env node

/**
 * CLI pour d√©monstration de validation progressive avec donn√©es simul√©es
 * Permet de tester le syst√®me sans d√©pendre du scraping externe
 */

import { MockValidationRunner } from '../MockValidationRunner'
import * as path from 'path'

interface CLIArgs {
  year?: number
  output?: string
  verbose?: boolean
  help?: boolean
}

function parseArgs(): CLIArgs {
  const args = process.argv.slice(2)
  const parsed: CLIArgs = {}

  for (let i = 0; i < args.length; i++) {
    const arg = args[i]
    switch (arg) {
      case '--year':
      case '-y':
        parsed.year = parseInt(args[++i])
        break
      case '--output':
      case '-o':
        parsed.output = args[++i]
        break
      case '--verbose':
      case '-v':
        parsed.verbose = true
        break
      case '--help':
      case '-h':
        parsed.help = true
        break
    }
  }

  return parsed
}

function printUsage() {
  console.log(`
üßÆ D√âMONSTRATION - Validation Progressive RevDisp
===============================================

Cette version de d√©monstration utilise des donn√©es de r√©f√©rence simul√©es
pour montrer le fonctionnement du syst√®me de validation progressive
sans d√©pendre du scraping externe du calculateur officiel MFQ.

Usage:
  npm run validate:progressive:demo [options]
  npx tsx src/lib/validation/cli/RunMockProgressiveValidation.ts [options]

Options:
  -y, --year <YEAR>      Ann√©e fiscale (d√©faut: 2024)
  -o, --output <DIR>     R√©pertoire de sortie (d√©faut: ./demo-reports/progressive-<timestamp>)
  -v, --verbose          Mode verbose
  -h, --help             Afficher cette aide

Exemples:
  npm run validate:progressive:demo
  npm run validate:progressive:demo -- --year 2025 --verbose

Fonctionnalit√©s d√©montr√©es:
  ‚úÖ Validation progressive 10‚Üí100‚Üí1000 cas
  ‚úÖ Analyse de tendances et d√©tection de r√©gression
  ‚úÖ Identification des programmes probl√©matiques
  ‚úÖ Recommandations intelligentes de correction
  ‚úÖ Rapports HTML interactifs avec m√©triques color√©es
  ‚úÖ Syst√®me complet de classification des erreurs

Note: Cette d√©monstration utilise des estimations r√©alistes bas√©es sur
      les param√®tres fiscaux r√©els, mais ne scrape pas le site officiel.
`)
}

async function main() {
  const args = parseArgs()

  if (args.help) {
    printUsage()
    process.exit(0)
  }

  // Configuration
  const taxYear = args.year ?? 2024
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[T:]/g, '-')
  const outputDir = args.output ?? `./demo-reports/progressive-${taxYear}-${timestamp}`

  console.log('üß™ D√âMONSTRATION - VALIDATION PROGRESSIVE')
  console.log('========================================')
  console.log(`üìÖ Ann√©e fiscale: ${taxYear}`)
  console.log(`üìÅ Rapports: ${path.resolve(outputDir)}`)
  console.log(`üîç Mode: ${args.verbose ? 'Verbose' : 'Standard'}`)
  console.log()
  console.log('‚ö†Ô∏è  IMPORTANTE: Cette d√©monstration utilise des donn√©es simul√©es')
  console.log('    pour montrer les capacit√©s du syst√®me sans scraping externe.')
  console.log()

  try {
    const runner = new MockValidationRunner(taxYear)
    await runner.initialize()

    const startTime = Date.now()
    const results = await runner.runProgressiveValidation(outputDir)
    const totalTime = (Date.now() - startTime) / 1000

    console.log()
    console.log('üéä D√âMONSTRATION TERMIN√âE AVEC SUCC√àS!')
    console.log('====================================')
    console.log(`‚è±Ô∏è  Temps total: ${totalTime.toFixed(1)}s`)
    console.log(`üìä Cas trait√©s: ${results.overallAnalysis.totalCasesProcessed}`)
    
    const finalAccuracy = results.overallAnalysis.accuracyTrend[results.overallAnalysis.accuracyTrend.length - 1]
    console.log(`üéØ Pr√©cision finale: ${finalAccuracy.toFixed(1)}%`)
    
    console.log()
    console.log('üìÅ Fichiers g√©n√©r√©s:')
    console.log(`   üåê ${outputDir}/progressive-validation-report.html`)
    console.log(`   üìã ${outputDir}/progressive-validation-summary.json`)
    console.log(`   üìÇ ${outputDir}/phase*/ (rapports d√©taill√©s par phase)`)
    console.log()
    console.log('üí° PROCHAINES √âTAPES:')
    console.log('1. Ouvrir le rapport HTML pour voir les m√©triques visuelles')
    console.log('2. Examiner les programmes identifi√©s comme critiques')  
    console.log('3. Appliquer les recommandations de correction sugg√©r√©es')
    console.log('4. Une fois les corrections faites, utiliser le vrai syst√®me:')
    console.log('   npm run validate:progressive')
    console.log()
    console.log('üìñ Documentation compl√®te: VALIDATION-SYSTEM.md')
    
    // Ouvrir le rapport HTML automatiquement si possible
    try {
      const { exec } = require('child_process')
      const htmlPath = path.join(outputDir, 'progressive-validation-report.html')
      
      if (process.platform === 'darwin') {
        exec(`open "${htmlPath}"`)
        console.log('üåê Rapport HTML ouvert automatiquement')
      } else if (process.platform === 'linux') {
        exec(`xdg-open "${htmlPath}"`)
        console.log('üåê Rapport HTML ouvert automatiquement')
      }
    } catch (error) {
      // Ignore les erreurs d'ouverture automatique
    }

    if (finalAccuracy >= 95) {
      console.log('üéâ SUCC√àS COMPLET: Calculateur valid√© avec excellence!')
      process.exit(0)
    } else if (finalAccuracy >= 85) {
      console.log('‚úÖ SUCC√àS ACCEPTABLE: Performance satisfaisante')
      process.exit(0)
    } else {
      console.log('‚ö†Ô∏è  ATTENTION REQUISE: Pr√©cision insuffisante pour production')
      process.exit(1)
    }

  } catch (error) {
    console.error()
    console.error('‚ùå ERREUR LORS DE LA D√âMONSTRATION:')
    console.error('================================')
    
    if (error instanceof Error) {
      console.error(`Message: ${error.message}`)
      if (args.verbose && error.stack) {
        console.error(`Stack: ${error.stack}`)
      }
    } else {
      console.error('Erreur inconnue:', error)
    }
    
    console.error()
    console.error('üîß Cette erreur peut √™tre due √†:')
    console.error('1. Probl√®me dans les calculs de notre syst√®me')
    console.error('2. Configuration incorrecte des param√®tres fiscaux')
    console.error('3. Erreur de logique dans le code de d√©monstration')
    
    process.exit(1)
  }
}

// Point d'entr√©e
if (require.main === module) {
  main().catch(console.error)
}

export { main as runMockProgressiveValidation }