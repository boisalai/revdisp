#!/usr/bin/env node

/**
 * CLI pour lancer la validation progressive
 * 
 * Usage:
 * npm run validate:progressive
 * npm run validate:progressive -- --year 2024 --output ./reports
 * npx tsx src/lib/validation/cli/RunProgressiveValidation.ts --year 2025
 */

import { ProgressiveValidationRunner, ProgressiveValidationConfig } from '../ProgressiveValidationRunner'
import * as path from 'path'

interface CLIArgs {
  year?: number
  output?: string
  verbose?: boolean
  help?: boolean
}

function parseArgs(): CLIArgs {
  const args = process.argv.slice(2)
  const parsed: CLIArgs = {}

  for (let i = 0; i < args.length; i++) {
    const arg = args[i]
    switch (arg) {
      case '--year':
      case '-y':
        parsed.year = parseInt(args[++i])
        break
      case '--output':
      case '-o':
        parsed.output = args[++i]
        break
      case '--verbose':
      case '-v':
        parsed.verbose = true
        break
      case '--help':
      case '-h':
        parsed.help = true
        break
    }
  }

  return parsed
}

function printUsage() {
  console.log(`
üßÆ Validation Progressive - Calculateur RevDisp
===============================================

Valide notre calculateur contre le calculateur officiel du MFQ
en progressant de 10 ‚Üí 100 ‚Üí 1000+ cas de test.

Usage:
  npm run validate:progressive [options]
  npx tsx src/lib/validation/cli/RunProgressiveValidation.ts [options]

Options:
  -y, --year <YEAR>      Ann√©e fiscale (d√©faut: 2024)
  -o, --output <DIR>     R√©pertoire de sortie (d√©faut: ./validation-reports/progressive-<timestamp>)
  -v, --verbose          Mode verbose
  -h, --help             Afficher cette aide

Exemples:
  npm run validate:progressive
  npm run validate:progressive -- --year 2025 --output ./my-reports
  npm run validate:progressive -- --verbose

Phases de validation:
  1. Phase 1: 10 cas repr√©sentatifs (validation rapide)
  2. Phase 2: 100 cas diversifi√©s (validation √©tendue)  
  3. Phase 3: 1000+ cas Monte Carlo (validation massive)

Sortie:
  - progressive-validation-summary.json (donn√©es brutes)
  - progressive-validation-report.html (rapport visuel)
  - Rapports d√©taill√©s par phase
  - Recommandations de corrections prioritaires
`)
}

async function main() {
  const args = parseArgs()

  if (args.help) {
    printUsage()
    process.exit(0)
  }

  // Configuration par d√©faut
  const taxYear = args.year ?? 2024
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[T:]/g, '-')
  const baseOutputDir = args.output ?? `./validation-reports/progressive-${taxYear}-${timestamp}`

  console.log('üöÄ LANCEMENT DE LA VALIDATION PROGRESSIVE')
  console.log('=========================================')
  console.log(`üìÖ Ann√©e fiscale: ${taxYear}`)
  console.log(`üìÅ Rapports: ${path.resolve(baseOutputDir)}`)
  console.log(`üîç Mode: ${args.verbose ? 'Verbose' : 'Standard'}`)
  console.log()

  // V√©rifier les pr√©requis
  console.log('üîß V√©rification des pr√©requis...')
  
  // V√©rifier que les modules n√©cessaires sont disponibles
  try {
    await import('puppeteer')
    console.log('‚úÖ Puppeteer disponible')
  } catch (error) {
    console.error('‚ùå Puppeteer non install√©. Installez avec: npm install puppeteer')
    process.exit(1)
  }

  try {
    const config: ProgressiveValidationConfig = {
      taxYear,
      baseOutputDir,
      verbose: args.verbose ?? false
    }

    const runner = new ProgressiveValidationRunner(config)
    const startTime = Date.now()

    const results = await runner.runProgressiveValidation()

    const totalTime = (Date.now() - startTime) / 1000
    console.log()
    console.log('üéä VALIDATION PROGRESSIVE TERMIN√âE AVEC SUCC√àS!')
    console.log('==============================================')
    console.log(`‚è±Ô∏è  Temps total: ${totalTime.toFixed(1)}s`)
    console.log(`üìä Cas trait√©s: ${results.overallAnalysis.totalCasesProcessed}`)
    
    const finalAccuracy = results.overallAnalysis.accuracyTrend[results.overallAnalysis.accuracyTrend.length - 1]
    console.log(`üéØ Pr√©cision finale: ${finalAccuracy.toFixed(1)}%`)
    
    console.log()
    console.log('üìÅ Fichiers g√©n√©r√©s:')
    console.log(`   üìÑ ${baseOutputDir}/progressive-validation-report.html`)
    console.log(`   üìã ${baseOutputDir}/progressive-validation-summary.json`)
    console.log(`   üìÇ ${baseOutputDir}/phase*/ (rapports d√©taill√©s par phase)`)
    console.log()
    
    if (finalAccuracy >= 95) {
      console.log('üéâ SUCC√àS COMPLET: Calculateur valid√© avec excellence!')
      process.exit(0)
    } else if (finalAccuracy >= 85) {
      console.log('‚úÖ SUCC√àS ACCEPTABLE: Performance satisfaisante')
      console.log('üí° Consultez les recommandations pour am√©liorer la pr√©cision')
      process.exit(0)
    } else {
      console.log('‚ö†Ô∏è  ATTENTION REQUISE: Pr√©cision insuffisante')
      console.log('üîß Corrections n√©cessaires avant utilisation en production')
      console.log(`üìã Consultez ${baseOutputDir}/progressive-validation-report.html`)
      process.exit(1)
    }

  } catch (error) {
    console.error()
    console.error('‚ùå ERREUR LORS DE LA VALIDATION:')
    console.error('===============================')
    
    if (error instanceof Error) {
      console.error(`Message: ${error.message}`)
      if (args.verbose && error.stack) {
        console.error(`Stack: ${error.stack}`)
      }
    } else {
      console.error('Erreur inconnue:', error)
    }
    
    console.error()
    console.error('üîß Actions sugg√©r√©es:')
    console.error('1. V√©rifiez votre connexion internet')
    console.error('2. Assurez-vous que le calculateur officiel du MFQ est accessible')
    console.error('3. Relancez avec --verbose pour plus de d√©tails')
    console.error('4. Consultez les logs dans le r√©pertoire de sortie')
    
    process.exit(1)
  }
}

// Point d'entr√©e
if (require.main === module) {
  main().catch(console.error)
}

export { main as runProgressiveValidationCLI }