/**
 * Test du calcul du cr√©dit pour personne vivant seule
 * Cas : 25 ans, 15 000$ revenu brut
 */

const Decimal = require('decimal.js');

// Param√®tres officiels 2024 pour cr√©dit personne seule
const LIVING_ALONE_CONFIG = {
  base_amount: 2069,           // Montant de base
  single_parent_supplement: 2554, // Suppl√©ment famille monoparentale
  reduction_threshold: 40925,   // Seuil de r√©duction
  reduction_rate: 0.1875       // Taux de r√©duction 18.75%
};

const TAX_RATE = 0.14; // Taux de cr√©dit 14%

function testLivingAloneCredit() {
  console.log('üßÆ TEST DU CR√âDIT POUR PERSONNE VIVANT SEULE');
  console.log('='.repeat(50));

  // Cas test : 25 ans, 15 000$ revenu brut
  const grossIncome = 15000;
  const age = 25;
  const cotisations = 1008; // AE + RRQ + RQAP selon scraper

  // Revenu net approximatif (pour seuils de r√©duction)
  const netIncome = grossIncome - cotisations; // 13 992$
  console.log(`Revenu brut: ${grossIncome}$`);
  console.log(`Cotisations: ${cotisations}$`);
  console.log(`Revenu net (approximatif): ${netIncome}$`);

  // Calcul du cr√©dit pour personne vivant seule
  const baseAmount = new Decimal(LIVING_ALONE_CONFIG.base_amount);
  const reductionThreshold = new Decimal(LIVING_ALONE_CONFIG.reduction_threshold);
  const netIncomeDecimal = new Decimal(netIncome);

  console.log(`\nüéØ CALCUL DU CR√âDIT:`);
  console.log(`Montant de base: ${baseAmount.toFixed(2)}$`);
  console.log(`Seuil de r√©duction: ${reductionThreshold.toFixed(2)}$`);

  // Aucune r√©duction car revenu net < seuil
  let eligibleAmount = baseAmount;
  if (netIncomeDecimal.greaterThan(reductionThreshold)) {
    const excessIncome = netIncomeDecimal.minus(reductionThreshold);
    const reductionRate = new Decimal(LIVING_ALONE_CONFIG.reduction_rate);
    const reduction = excessIncome.times(reductionRate);
    eligibleAmount = Decimal.max(0, baseAmount.minus(reduction));

    console.log(`Exc√©dent de revenu: ${excessIncome.toFixed(2)}$`);
    console.log(`R√©duction: ${reduction.toFixed(2)}$`);
  } else {
    console.log(`Pas de r√©duction (revenu < seuil)`);
  }

  console.log(`Montant admissible: ${eligibleAmount.toFixed(2)}$`);

  // Conversion en cr√©dit d'imp√¥t
  const taxRate = new Decimal(TAX_RATE);
  const creditAmount = eligibleAmount.times(taxRate);

  console.log(`\nüí∞ CR√âDIT FINAL:`);
  console.log(`${eligibleAmount.toFixed(2)}$ √ó ${(taxRate.times(100)).toFixed(0)}% = ${creditAmount.toFixed(2)}$`);

  // Comparaison avec notre ancienne m√©thode
  const oldAmount = new Decimal(1890); // Ancien param√®tre
  const oldCredit = oldAmount.times(taxRate);

  console.log(`\nüìä COMPARAISON:`);
  console.log(`‚Ä¢ Nouveau calcul: ${creditAmount.toFixed(2)}$`);
  console.log(`‚Ä¢ Ancien calcul: ${oldCredit.toFixed(2)}$`);
  console.log(`‚Ä¢ Am√©lioration: +${creditAmount.minus(oldCredit).toFixed(2)}$`);

  // Calcul total des cr√©dits
  const basicPersonalAmount = new Decimal(18056);
  const basicCredit = basicPersonalAmount.times(taxRate);
  const totalCredits = basicCredit.plus(creditAmount);

  console.log(`\nüéØ CR√âDITS TOTAUX:`);
  console.log(`‚Ä¢ Cr√©dit personnel de base: ${basicCredit.toFixed(2)}$`);
  console.log(`‚Ä¢ Cr√©dit personne seule: ${creditAmount.toFixed(2)}$`);
  console.log(`‚Ä¢ Total cr√©dits: ${totalCredits.toFixed(2)}$`);

  return {
    livingAloneCredit: creditAmount.toNumber(),
    totalCredits: totalCredits.toNumber(),
    improvement: creditAmount.minus(oldCredit).toNumber()
  };
}

const result = testLivingAloneCredit();

console.log(`\nüìã R√âSUM√â:`);
console.log(`Cr√©dit personne seule: ${result.livingAloneCredit.toFixed(2)}$`);
console.log(`Am√©lioration vs ancien: +${result.improvement.toFixed(2)}$`);
console.log(`Total cr√©dits: ${result.totalCredits.toFixed(2)}$`);